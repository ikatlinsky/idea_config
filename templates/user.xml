<templateSet group="user">
  <template name="sec-web-mvc" value="@org.springframework.context.annotation.Configuration&#10;public class MvcConfig extends org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter {&#10;    @java.lang.Override&#10;    public void addViewControllers(org.springframework.web.servlet.config.annotation.ViewControllerRegistry registry) {&#10;        registry.addViewController(&quot;/home&quot;).setViewName(&quot;home&quot;);&#10;        registry.addViewController(&quot;/&quot;).setViewName(&quot;home&quot;);&#10;        registry.addViewController(&quot;/hello&quot;).setViewName(&quot;hello&quot;);&#10;        registry.addViewController(&quot;/login&quot;).setViewName(&quot;login&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="sec-web-security-config" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;public class WebSecurityConfig extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;    @java.lang.Override&#10;    protected void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        http&#10;            .authorizeRequests()&#10;            .antMatchers(&quot;/&quot;, &quot;/home&quot;).permitAll()&#10;            .anyRequest().authenticated()&#10;            .and()&#10;            .formLogin()&#10;            .loginPage(&quot;/login&quot;)&#10;            .permitAll()&#10;            .and()&#10;            .logout()&#10;            .permitAll();&#10;    }&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public void configureGlobal(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder auth) throws java.lang.Exception {&#10;        auth&#10;            .inMemoryAuthentication()&#10;            .withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="sec-user" value="@javax.persistence.Entity&#10;@lombok.Getter&#10;@lombok.Setter&#10;@lombok.NoArgsConstructor&#10;public class User {&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)&#10;    private java.lang.Long id;&#10;    private java.lang.String username;&#10;    private java.lang.String password;&#10;&#10;    public User(java.lang.String username, java.lang.String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="sec-user-details" value="@lombok.NoArgsConstructor&#10;public class CustomUserDetails implements org.springframework.security.core.userdetails.UserDetails {&#10;&#10;    private java.lang.String username;&#10;    private java.lang.String password;&#10;&#10;    public CustomUserDetails(com.spring.security.model.User user) {&#10;        this.username = user.getUsername();&#10;        this.password = user.getPassword();&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.util.Collection&lt;? extends org.springframework.security.core.GrantedAuthority&gt; getAuthorities() {&#10;        return null;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String getPassword() {&#10;        return this.password;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String getUsername() {&#10;        return this.username;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isAccountNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isAccountNonLocked() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isCredentialsNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isEnabled() {&#10;        return true;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="sec-user-repo" value="@org.springframework.stereotype.Repository&#10;public interface UserRepository extends org.springframework.data.repository.CrudRepository&lt;com.spring.security.model.User, java.lang.Long&gt;{&#10;&#10;    com.spring.security.model.User findByUsername(java.lang.String username);&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="sec-user-details-service" value="@org.springframework.stereotype.Service&#10;@lombok.RequiredArgsConstructor&#10;public class CustomUserDetailsService implements org.springframework.security.core.userdetails.UserDetailsService {&#10;&#10;    private final com.spring.security.repository.UserRepository userRepository;&#10;&#10;    @java.lang.Override&#10;    public org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String username) throws org.springframework.security.core.userdetails.UsernameNotFoundException {&#10;        return new com.spring.security.model.CustomUserDetails(this.userRepository.findByUsername(username));&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="sec-web-security-config-2" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;public class WebSecurityConfig extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    com.spring.security.service.CustomUserDetailsService customUserDetailsService;&#10;&#10;    @java.lang.Override&#10;    protected void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        http&#10;                .csrf().disable()&#10;                .authorizeRequests()&#10;                .antMatchers(&quot;/&quot;, &quot;/home&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;                .and()&#10;                .formLogin()&#10;                .loginPage(&quot;/login&quot;)&#10;                .permitAll()&#10;                .and()&#10;                .logout()&#10;                .permitAll();&#10;    }&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public void configureGlobal(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder auth) throws java.lang.Exception {&#10;        auth.userDetailsService(customUserDetailsService);&#10;        auth.authenticationProvider(authenticationProvider());&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider() {&#10;        org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider = new org.springframework.security.authentication.dao.DaoAuthenticationProvider();&#10;        authenticationProvider.setUserDetailsService(customUserDetailsService);&#10;        return authenticationProvider;&#10;    }&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="sec-bootstrap" value="@org.springframework.context.annotation.Bean&#10;    public org.springframework.boot.CommandLineRunner bootstrap(com.spring.security.repository.UserRepository repository) {&#10;        return (args) -&gt; {&#10;            // save a couple of customers&#10;            repository.save(new com.spring.security.model.User(&quot;Jack&quot;, &quot;password&quot;));&#10;            repository.save(new com.spring.security.model.User(&quot;Chloe&quot;, &quot;password&quot;));&#10;            repository.save(new com.spring.security.model.User(&quot;Kim&quot;, &quot;password&quot;));&#10;            repository.save(new com.spring.security.model.User(&quot;David&quot;, &quot;password&quot;));&#10;            repository.save(new com.spring.security.model.User(&quot;Michelle&quot;, &quot;password&quot;));&#10;        };&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jpa-user" value="@javax.persistence.Entity&#10;@javax.persistence.Table(name = &quot;users&quot;)&#10;@lombok.Getter&#10;@lombok.Setter&#10;@lombok.NoArgsConstructor&#10;@lombok.ToString&#10;public class User {&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)&#10;    private java.lang.Long id;&#10;    private java.lang.String name;&#10;    private java.lang.String email;&#10;    private java.lang.Integer age;&#10;&#10;    public User(java.lang.String name, java.lang.String email, java.lang.Integer age) {&#10;        this.name = name;&#10;        this.email = email;&#10;        this.age = age;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jpa-user-repo" value="public interface UserRepository extends org.springframework.data.repository.CrudRepository&lt;com.spring.jpa.model.User, java.lang.Long&gt; {&#10;&#10;    com.spring.jpa.model.User findByName(java.lang.String name);&#10;&#10;    @org.springframework.data.jpa.repository.Query(value&quot;from User as user where user.age &gt; 16&quot;)&#10;    java.util.List&lt;com.spring.jpa.model.User&gt; findByAgeAfter16();&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jpa-email-predicate" value="@lombok.RequiredArgsConstructor&#10;public class UserEmailPredicate implements org.springframework.data.jpa.domain.Specification&lt;com.spring.jpa.model.User&gt; {&#10;&#10;    private final java.lang.String emailPart;&#10;&#10;    @java.lang.Override&#10;    public javax.persistence.criteria.Predicate toPredicate(javax.persistence.criteria.Root&lt;com.spring.jpa.model.User&gt; root, javax.persistence.criteria.CriteriaQuery&lt;?&gt; query, javax.persistence.criteria.CriteriaBuilder cb) {&#10;        return cb.like(root.get(&quot;email&quot;), &quot;%&quot; + emailPart + &quot;%&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jpa-user-repo-custom" value="public interface UserRepositoryCustom {&#10;&#10;    java.lang.String findNameById(java.lang.Long id);&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jpa-user-repo-impl" value="public class UserRepositoryImpl implements com.spring.jpa.repository.UserRepositoryCustom {&#10;&#10;    @javax.persistence.PersistenceContext&#10;    private javax.persistence.EntityManager em;&#10;&#10;    @java.lang.Override&#10;    public java.lang.String findNameById(java.lang.Long id) {&#10;        javax.persistence.criteria.CriteriaBuilder cb = em.getCriteriaBuilder();&#10;        javax.persistence.criteria.CriteriaQuery&lt;java.lang.String&gt; query = cb.createQuery(java.lang.String.class);&#10;        javax.persistence.criteria.Root&lt;com.spring.jpa.model.User&gt; from = query.from(com.spring.jpa.model.User.class);&#10;&#10;        query.select(from.get(&quot;email&quot;)).where(cb.equal(from.get(&quot;id&quot;), id));&#10;&#10;        return em.createQuery(query).getSingleResult();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="crm-user" value="@javax.persistence.Entity&#10;@javax.persistence.Table(name = &quot;users&quot;)&#10;@lombok.Getter&#10;@lombok.Setter&#10;@lombok.NoArgsConstructor&#10;@lombok.ToString&#10;public class User {&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)&#10;    private java.lang.Long id;&#10;    private java.lang.String username;&#10;    private java.lang.String password;&#10;    private java.lang.String email;&#10;&#10;    public User(java.lang.String username, java.lang.String password, java.lang.String email) {&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="crm-liquibase-1" value="databaseChangeLog:&#10;  - preConditions:&#10;    - runningAs:&#10;        username: sa&#10;  - changeSet:&#10;      id: 1&#10;      author: i.katlinsky&#10;      changes:&#10;        - createTable:&#10;            tableName: users&#10;            columns:&#10;              - column:&#10;                  name: id&#10;                  type: int&#10;                  autoIncrement: true&#10;                  constraints:&#10;                    primaryKey: true&#10;                    nullable: false&#10;              - column:&#10;                  name: username&#10;                  type: varchar(50)&#10;                  constraints:&#10;                    nullable: false&#10;              - column:&#10;                  name: password&#10;                  type: varchar(50)&#10;                  constraints:&#10;                    nullable: false&#10;              - column:&#10;                  name: email&#10;                  type: char(50)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="prj-config-init" value="management:&#10;  security:&#10;    enabled: false&#10;&#10;spring:&#10;  datasource:&#10;    url: jdbc:postgresql://localhost:5432/crm&#10;    username: postgres&#10;    password: postgres" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="prj-user-init" value="@javax.persistence.Entity&#10;@javax.persistence.Table(name = &quot;users&quot;)&#10;@lombok.Getter&#10;@lombok.Setter&#10;@lombok.NoArgsConstructor&#10;@lombok.ToString&#10;public class User {&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)&#10;    private java.lang.Long id;&#10;&#10;    @org.hibernate.validator.constraints.NotEmpty&#10;    private java.lang.String username;&#10;    @org.hibernate.validator.constraints.NotEmpty&#10;    private java.lang.String password;&#10;    @org.hibernate.validator.constraints.NotEmpty&#10;    @org.hibernate.validator.constraints.Email&#10;    private java.lang.String email;&#10;&#10;    @javax.validation.constraints.NotNull&#10;    @javax.persistence.Enumerated(javax.persistence.EnumType.STRING)&#10;    private com.spring.boot.demo.crm.model.UserRole role;&#10;&#10;    @javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, mappedBy = &quot;user&quot;)&#10;    private java.util.List&lt;com.spring.boot.demo.crm.model.Todo&gt; todos;&#10;&#10;    public User(java.lang.String username, java.lang.String password, java.lang.String email) {&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;    }&#10;&#10;    private java.time.Instant created;&#10;&#10;    private java.time.Instant updated;&#10;&#10;    private java.lang.Long createdBy;&#10;&#10;    private java.lang.Long updatedBy;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-user-role" value="public enum UserRole {&#10;    UserRole(&quot;User&quot;),&#10;    UserRole(&quot;Admin&quot;);&#10;&#10;    private final java.lang.String label;&#10;&#10;    UserRole(java.lang.String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    public java.lang.String getLabel() {&#10;        return label;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-todo" value="@javax.persistence.Entity&#10;@javax.persistence.Table(name = &quot;todos&quot;)&#10;@lombok.Getter&#10;@lombok.Setter&#10;@lombok.NoArgsConstructor&#10;@lombok.ToString&#10;public class Todo {&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)&#10;    private java.lang.Long id;&#10;&#10;    @org.hibernate.validator.constraints.NotEmpty&#10;    @javax.persistence.Column(nullable = false)&#10;    private java.lang.String title;&#10;    private java.lang.String description;&#10;&#10;    @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY)&#10;    @javax.persistence.JoinColumn(name = &quot;user_id&quot;)&#10;    private com.spring.boot.demo.crm.model.User user;&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-user-repo-1" value="@org.springframework.stereotype.Repository&#10;public interface UserRepository extends org.springframework.data.jpa.repository.JpaRepository&lt;com.spring.boot.demo.crm.model.User, java.lang.Long&gt; {&#10;&#10;    com.spring.boot.demo.crm.model.User findByUsername(@org.springframework.data.repository.query.Param(value&quot;username&quot;) java.lang.String username);&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-todo-repo-1" value="@org.springframework.stereotype.Repository&#10;public interface TodoRepository extends org.springframework.data.jpa.repository.JpaRepository&lt;com.spring.boot.demo.crm.model.Todo, java.lang.Long&gt; {&#10;&#10;    java.util.List&lt;com.spring.boot.demo.crm.model.Todo&gt; findByUserId(java.lang.Long userId);&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-user-details" value="@lombok.NoArgsConstructor&#10;@lombok.Getter&#10;public class CrmUserDetails implements org.springframework.security.core.userdetails.UserDetails {&#10;&#10;    private java.lang.Long id;&#10;    private java.lang.String username;&#10;    private java.lang.String password;&#10;    private java.util.Set&lt;org.springframework.security.core.authority.SimpleGrantedAuthority&gt; authorities;&#10;&#10;    public CrmUserDetails(com.spring.boot.demo.crm.model.User user) {&#10;        this.id = user.getId();&#10;        this.username = user.getUsername();&#10;        this.password = user.getPassword();&#10;        this.authorities = new java.util.HashSet&lt;&gt;();&#10;        this.authorities.add(new org.springframework.security.core.authority.SimpleGrantedAuthority(user.getRole().name()));&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.util.Collection&lt;? extends org.springframework.security.core.GrantedAuthority&gt; getAuthorities() {&#10;        return this.authorities;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String getPassword() {&#10;        return this.password;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String getUsername() {&#10;        return this.username;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isAccountNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isAccountNonLocked() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isCredentialsNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isEnabled() {&#10;        return true;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-user-details-service" value="@org.springframework.stereotype.Service&#10;@lombok.RequiredArgsConstructor&#10;public class CrmUserDetailsService implements org.springframework.security.core.userdetails.UserDetailsService {&#10;&#10;    private final com.spring.boot.demo.crm.repository.UserRepository userRepository;&#10;&#10;    @java.lang.Override&#10;    public org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String username) throws org.springframework.security.core.userdetails.UsernameNotFoundException {&#10;        return new com.spring.boot.demo.crm.security.CrmUserDetails(this.userRepository.findByUsername(username));&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-web-security-1" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;@lombok.RequiredArgsConstructor&#10;public class SecurityConfiguration extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;&#10;    private final com.spring.boot.demo.crm.security.CrmUserDetailsService crmUserDetailsService;&#10;&#10;    @java.lang.Override&#10;    protected void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        http&#10;                .csrf().disable()&#10;                .authorizeRequests()&#10;                .antMatchers(&quot;/api/**&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;                .and()&#10;                .formLogin()&#10;                .loginPage(&quot;/login&quot;)&#10;                .permitAll()&#10;                .and()&#10;                .logout()&#10;                .permitAll();&#10;    }&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public void configureGlobal(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder auth) throws java.lang.Exception {&#10;        auth.userDetailsService(crmUserDetailsService);&#10;        auth.authenticationProvider(authenticationProvider());&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider() {&#10;        org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider = new org.springframework.security.authentication.dao.DaoAuthenticationProvider();&#10;        authenticationProvider.setUserDetailsService(crmUserDetailsService);&#10;        authenticationProvider.setPasswordEncoder(passwordEncoder());&#10;        return authenticationProvider;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.crypto.password.PasswordEncoder passwordEncoder() {&#10;        return new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-login-page" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;CRM: Login Page&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div th:th:if=&quot;${param.error}&quot;&gt;&#10;    Invalid username and password.&#10;&lt;/div&gt;&#10;&lt;div th:th:if=&quot;${param.logout}&quot;&gt;&#10;    You have been logged out.&#10;&lt;/div&gt;&#10;&lt;form th:th:action=&quot;@{/login}&quot; method=&quot;post&quot;&gt;&#10;    &lt;div&gt;&lt;label&gt; User Name : &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; &lt;/label&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;label&gt; Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt; &lt;/label&gt;&lt;/div&gt;&#10;    &lt;div&gt;&lt;input type=&quot;submit&quot; value=&quot;Sign In&quot;/&gt;&lt;/div&gt;&#10;&lt;/form&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="prj-home-page" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;CRM Application&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1 th:th:inline=&quot;text&quot;&gt;WELCOME, [[${#httpServletRequest.remoteUser}]]!&lt;/h1&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;a th:th:href=&quot;@{/users}&quot;&gt;Users&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a th:th:href=&quot;@{/todos}&quot;&gt;Todos&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;form th:th:action=&quot;@{/logout}&quot; method=&quot;post&quot;&gt;&#10;    &lt;input type=&quot;submit&quot; value=&quot;Sign Out&quot;/&gt;&#10;&lt;/form&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="prj-user-service" value="@org.springframework.stereotype.Service&#10;@lombok.RequiredArgsConstructor&#10;@org.springframework.transaction.annotation.Transactional(readOnly = true)&#10;public class UserService {&#10;&#10;    private final com.spring.boot.demo.crm.repository.UserRepository userRepository;&#10;    private final org.springframework.security.crypto.password.PasswordEncoder passwordEncoder;&#10;&#10;    public com.spring.boot.demo.crm.model.User findOne(java.lang.Long userId) {&#10;        return this.userRepository.findOne(userId);&#10;    }&#10;&#10;    public java.util.List&lt;com.spring.boot.demo.crm.model.User&gt; findAll() {&#10;        return this.userRepository.findAll();&#10;    }&#10;&#10;    @org.springframework.transaction.annotation.Transactional&#10;    public void create(com.spring.boot.demo.crm.model.User user) {&#10;        user.setPassword(passwordEncoder.encode(user.getPassword()));&#10;        this.userRepository.save(user);&#10;    }&#10;&#10;    @org.springframework.transaction.annotation.Transactional&#10;    public void update(com.spring.boot.demo.crm.model.User user) {&#10;        com.spring.boot.demo.crm.model.User entity = this.userRepository.findOne(user.getId());&#10;&#10;        if (java.util.Objects.nonNull(entity)) {&#10;            entity.setUsername(user.getUsername());&#10;            entity.setEmail(user.getEmail());&#10;            entity.setRole(user.getRole());&#10;&#10;            if (java.util.Objects.nonNull(user.getPassword())) {&#10;                entity.setPassword(user.getPassword());&#10;            }&#10;&#10;            this.userRepository.save(entity);&#10;        }&#10;    }&#10;&#10;    @org.springframework.transaction.annotation.Transactional&#10;    public void delete(java.lang.Long id) {&#10;        this.userRepository.delete(id);&#10;    }&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-todo-service" value="@org.springframework.stereotype.Service&#10;@org.springframework.transaction.annotation.Transactional(readOnly = true)&#10;@lombok.RequiredArgsConstructor&#10;public class TodoService {&#10;&#10;    private final com.spring.boot.demo.crm.repository.TodoRepository todoRepository;&#10;    private final com.spring.boot.demo.crm.repository.UserRepository userRepository;&#10;&#10;    public com.spring.boot.demo.crm.model.Todo findOne(java.lang.Long todoId) {&#10;        return this.todoRepository.findOne(todoId);&#10;    }&#10;&#10;    public java.util.List&lt;com.spring.boot.demo.crm.model.Todo&gt; findAll() {&#10;        final java.lang.Long currentUserId = com.spring.boot.demo.crm.security.SecurityHelper.getUserId();&#10;        return this.todoRepository.findByUserId(currentUserId);&#10;    }&#10;&#10;    @org.springframework.transaction.annotation.Transactional&#10;    public void create(com.spring.boot.demo.crm.model.Todo todo) {&#10;        final java.lang.Long currentUserId = com.spring.boot.demo.crm.security.SecurityHelper.getUserId();&#10;        final com.spring.boot.demo.crm.model.User currentUser = this.userRepository.findOne(currentUserId);&#10;&#10;        todo.setUser(currentUser);&#10;        this.todoRepository.save(todo);&#10;    }&#10;&#10;    @org.springframework.transaction.annotation.Transactional&#10;    public void update(com.spring.boot.demo.crm.model.Todo todo) {&#10;        com.spring.boot.demo.crm.model.Todo entity = this.todoRepository.findOne(todo.getId());&#10;&#10;        if (java.util.Objects.nonNull(entity)) {&#10;            entity.setTitle(todo.getTitle());&#10;            entity.setDescription(todo.getDescription());&#10;&#10;            this.todoRepository.save(entity);&#10;        }&#10;    }&#10;&#10;    @org.springframework.transaction.annotation.Transactional&#10;    public void delete(java.lang.Long id) {&#10;        this.todoRepository.delete(id);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-web-configuration" value="@org.springframework.context.annotation.Configuration&#10;public class WebConfiguration extends org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter {&#10;&#10;    @java.lang.Override&#10;    public void addViewControllers(org.springframework.web.servlet.config.annotation.ViewControllerRegistry registry) {&#10;        registry.addViewController(&quot;/home&quot;).setViewName(&quot;home&quot;);&#10;        registry.addViewController(&quot;/&quot;).setViewName(&quot;home&quot;);&#10;        registry.addViewController(&quot;/login&quot;).setViewName(&quot;login&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-user-controller" value="@org.springframework.stereotype.Controller&#10;@org.springframework.web.bind.annotation.RequestMapping(value&quot;/users&quot;)&#10;@lombok.RequiredArgsConstructor&#10;public class UserController {&#10;&#10;    private final com.spring.boot.demo.crm.service.UserService userService;&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping&#10;    public java.lang.String listUsers(org.springframework.ui.Model model) {&#10;        java.util.List&lt;com.spring.boot.demo.crm.model.User&gt; users = userService.findAll();&#10;        model.addAttribute(&quot;users&quot;, users);&#10;&#10;        return &quot;users/list&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(value&quot;/new&quot;)&#10;    public java.lang.String newUser(org.springframework.ui.Model model) {&#10;        com.spring.boot.demo.crm.model.User user = new com.spring.boot.demo.crm.model.User();&#10;&#10;        model.addAttribute(&quot;user&quot;, user);&#10;&#10;        return &quot;users/edit&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.PostMapping&#10;    public java.lang.String saveUser(@javax.validation.Valid com.spring.boot.demo.crm.model.User user, org.springframework.validation.BindingResult result, org.springframework.ui.Model model) {&#10;        if (result.hasErrors()) {&#10;            return &quot;users/edit&quot;;&#10;        }&#10;&#10;        this.userService.create(user);&#10;&#10;        model.addAttribute(&quot;success&quot;, &quot;User &quot; + user.getUsername() + &quot; created successfully&quot;);&#10;&#10;        return &quot;redirect:/users&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(value&quot;/{userId}&quot;)&#10;    public java.lang.String editUser(@org.springframework.web.bind.annotation.PathVariable java.lang.Long userId, org.springframework.ui.Model model) {&#10;        com.spring.boot.demo.crm.model.User user = userService.findOne(userId);&#10;&#10;        model.addAttribute(&quot;user&quot;, user);&#10;&#10;        return &quot;users/edit&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.PostMapping(value&quot;/{userId}&quot;)&#10;    public java.lang.String updateUser(@org.springframework.web.bind.annotation.PathVariable java.lang.Long userId, @javax.validation.Valid com.spring.boot.demo.crm.model.User user, org.springframework.validation.BindingResult result, org.springframework.ui.Model model) {&#10;        if (result.hasErrors()) {&#10;            return &quot;users/edit&quot;;&#10;        }&#10;&#10;        this.userService.update(user);&#10;&#10;        model.addAttribute(&quot;success&quot;, &quot;User &quot; + user.getUsername() + &quot; updated successfully&quot;);&#10;&#10;        return &quot;redirect:/users&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(value&quot;/delete/{userId}&quot;)&#10;    public java.lang.String deleteUser(@org.springframework.web.bind.annotation.PathVariable java.lang.Long userId) {&#10;        this.userService.delete(userId);&#10;&#10;        return &quot;redirect:/users&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.ModelAttribute(value&quot;roles&quot;)&#10;    public java.util.Map&lt;com.spring.boot.demo.crm.model.UserRole, java.lang.String&gt; initializeRoles() {&#10;        return java.util.Arrays.stream(com.spring.boot.demo.crm.model.UserRole.values()).collect(java.util.stream.Collectors.toMap(value -&gt; value, com.spring.boot.demo.crm.model.UserRole::getLabel));&#10;    }&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-todo-controller" value="@org.springframework.stereotype.Controller&#10;@org.springframework.web.bind.annotation.RequestMapping(value&quot;/todos&quot;)&#10;@lombok.RequiredArgsConstructor&#10;public class TodoController {&#10;&#10;    private final com.spring.boot.demo.crm.service.TodoService todoService;&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping&#10;    public java.lang.String listTodos(org.springframework.ui.Model model) {&#10;        java.util.List&lt;com.spring.boot.demo.crm.model.Todo&gt; todos = todoService.findAll();&#10;        model.addAttribute(&quot;todos&quot;, todos);&#10;&#10;        return &quot;todos/list&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(value&quot;/new&quot;)&#10;    public java.lang.String newTodo(org.springframework.ui.Model model) {&#10;        com.spring.boot.demo.crm.model.Todo todo = new com.spring.boot.demo.crm.model.Todo();&#10;&#10;        model.addAttribute(&quot;todo&quot;, todo);&#10;&#10;        return &quot;todos/edit&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.PostMapping&#10;    public java.lang.String saveTodo(@javax.validation.Valid com.spring.boot.demo.crm.model.Todo todo, org.springframework.validation.BindingResult result, org.springframework.ui.Model model) {&#10;        if (result.hasErrors()) {&#10;            return &quot;todos/edit&quot;;&#10;        }&#10;&#10;        this.todoService.create(todo);&#10;&#10;        model.addAttribute(&quot;success&quot;, &quot;Todo &quot; + todo.getTitle() + &quot; created successfully&quot;);&#10;&#10;        return &quot;redirect:/todos&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(value&quot;/{todoId}&quot;)&#10;    public java.lang.String editTodo(@org.springframework.web.bind.annotation.PathVariable java.lang.Long todoId, org.springframework.ui.Model model) {&#10;        com.spring.boot.demo.crm.model.Todo todo = todoService.findOne(todoId);&#10;&#10;        model.addAttribute(&quot;todo&quot;, todo);&#10;&#10;        return &quot;todos/edit&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.PostMapping(value&quot;/{todoId}&quot;)&#10;    public java.lang.String updateTodo(@org.springframework.web.bind.annotation.PathVariable java.lang.Long todoId, @javax.validation.Valid com.spring.boot.demo.crm.model.Todo todo, org.springframework.validation.BindingResult result, org.springframework.ui.Model model) {&#10;        if (result.hasErrors()) {&#10;            return &quot;todos/edit&quot;;&#10;        }&#10;&#10;        this.todoService.update(todo);&#10;&#10;        model.addAttribute(&quot;success&quot;, &quot;Todo &quot; + todo.getTitle() + &quot; updated successfully&quot;);&#10;&#10;        return &quot;redirect:/todos&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(value&quot;/delete/{todoId}&quot;)&#10;    public java.lang.String deleteTodo(@org.springframework.web.bind.annotation.PathVariable java.lang.Long todoId) {&#10;        this.todoService.delete(todoId);&#10;&#10;        return &quot;redirect:/todos&quot;;&#10;    }&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-security-helper" value="public final class SecurityHelper {&#10;&#10;    public static java.lang.Long getUserId() {&#10;        return loggedUser().getId();&#10;    }&#10;&#10;    public static com.spring.boot.demo.crm.security.CrmUserDetails loggedUser() {&#10;        return (com.spring.boot.demo.crm.security.CrmUserDetails) getAuthenticationWithCheck().getPrincipal();&#10;    }&#10;&#10;    public static org.springframework.security.core.Authentication getAuthenticationWithCheck() {&#10;        org.springframework.security.core.Authentication authentication = org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();&#10;        boolean checkAuthenticationExists = authentication != null &amp;&amp; authentication.isAuthenticated();&#10;        if (checkAuthenticationExists) {&#10;            return authentication;&#10;        }&#10;&#10;        throw new org.springframework.security.authentication.BadCredentialsException(&quot;Authentication failed.&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-users-list-1" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&#10;      xmlns:th=&quot;http://www.thymeleaf.org&quot;&#10;      xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;User list&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;    &lt;div&gt;&#10;        &lt;h2 th:th:text=&quot;${'Hello, ' + principal}&quot;&gt;&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;panel panel-default&quot;&gt;&#10;&#10;        &lt;div class=&quot;panel-heading&quot;&gt;&#10;            &lt;h1&gt;List of Users &lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div th:th:if=&quot;${success}&quot;&gt;&#10;            &lt;h2 th:th:text=&quot;${success}&quot;&gt;&lt;/h2&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;well&quot;&gt;&#10;            &lt;a th:th:href=&quot;@{'/users/new'}&quot;&gt;Add New User&lt;/a&gt;&#10;            &lt;a th:th:href=&quot;@{/}&quot;&gt;Back&lt;/a&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;table class=&quot;table table-hover&quot;&gt;&#10;            &lt;thead&gt;&#10;                &lt;tr&gt;&#10;                    &lt;th&gt;Username&lt;/th&gt;&#10;                    &lt;th&gt;Email&lt;/th&gt;&#10;                    &lt;th&gt;Role&lt;/th&gt;&#10;                    &lt;th&gt;&lt;/th&gt;&#10;                    &lt;th&gt;&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/thead&gt;&#10;            &lt;tbody&gt;&#10;                &lt;tr th:th:each=&quot;user : ${users}&quot;&gt;&#10;                    &lt;td th:th:text=&quot;${user.username}&quot;&gt;&lt;/td&gt;&#10;                    &lt;td th:th:text=&quot;${user.email}&quot;&gt;&lt;/td&gt;&#10;                    &lt;td th:th:text=&quot;${user.role}&quot;&gt;&lt;/td&gt;&#10;                    &lt;td&gt;&#10;                        &lt;a th:th:href=&quot;@{'/users/' + ${user.id}}&quot; class=&quot;btn btn-success custom-width&quot;&gt;edit&lt;/a&gt;&#10;                    &lt;/td&gt;&#10;                    &lt;td&gt;&#10;                        &lt;a th:th:href=&quot;@{'/users/delete/' + ${user.id}}&quot; class=&quot;btn btn-danger custom-width&quot;&gt;delete&lt;/a&gt;&#10;                    &lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;    &lt;/div&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="prj-users-list-2" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&#10;      xmlns:th=&quot;http://www.thymeleaf.org&quot;&#10;      xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;User list&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;    &lt;div&gt;&#10;        &lt;h2 th:th:text=&quot;${'Hello, ' + principal}&quot;&gt;&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;panel panel-default&quot;&gt;&#10;&#10;        &lt;div class=&quot;panel-heading&quot;&gt;&#10;            &lt;h1&gt;List of Users &lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div th:th:if=&quot;${success}&quot;&gt;&#10;            &lt;h2 th:th:text=&quot;${success}&quot;&gt;&lt;/h2&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;well&quot;&gt;&#10;            &lt;a th:th:href=&quot;@{'/users/new'}&quot; sec:sec:authorize=&quot;hasRole('ROLE_ADMIN')&quot;&gt;Add New User&lt;/a&gt;&#10;            &lt;a th:th:href=&quot;@{/}&quot;&gt;Back&lt;/a&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;table class=&quot;table table-hover&quot;&gt;&#10;            &lt;thead&gt;&#10;                &lt;tr&gt;&#10;                    &lt;th&gt;Username&lt;/th&gt;&#10;                    &lt;th&gt;Email&lt;/th&gt;&#10;                    &lt;th&gt;Role&lt;/th&gt;&#10;                    &lt;th sec:sec:authorize=&quot;hasRole('ROLE_ADMIN')&quot;&gt;&lt;/th&gt;&#10;                    &lt;th sec:sec:authorize=&quot;hasRole('ROLE_ADMIN')&quot;&gt;&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/thead&gt;&#10;            &lt;tbody&gt;&#10;                &lt;tr th:th:each=&quot;user : ${users}&quot;&gt;&#10;                    &lt;td th:th:text=&quot;${user.username}&quot;&gt;&lt;/td&gt;&#10;                    &lt;td th:th:text=&quot;${user.email}&quot;&gt;&lt;/td&gt;&#10;                    &lt;td th:th:text=&quot;${user.role}&quot;&gt;&lt;/td&gt;&#10;                    &lt;td sec:sec:authorize=&quot;hasRole('ROLE_ADMIN')&quot;&gt;&#10;                        &lt;a th:th:href=&quot;@{'/users/' + ${user.id}}&quot; class=&quot;btn btn-success custom-width&quot;&gt;edit&lt;/a&gt;&#10;                    &lt;/td&gt;&#10;                    &lt;td sec:sec:authorize=&quot;hasRole('ROLE_ADMIN')&quot;&gt;&#10;                        &lt;a th:th:href=&quot;@{'/users/delete/' + ${user.id}}&quot; class=&quot;btn btn-danger custom-width&quot;&gt;delete&lt;/a&gt;&#10;                    &lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;    &lt;/div&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="prj-user-edit" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Create User&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;div&gt;&#10;    &lt;h2 th:th:text=&quot;${'Hello, ' + principal}&quot;&gt;&lt;/h2&gt;&#10;&lt;/div&gt;&#10;&#10;    &lt;div class=&quot;panel panel-default&quot;&gt;&#10;&#10;        &lt;div class=&quot;panel-heading&quot;&gt;&#10;            &lt;h1&gt;Create User&lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form action=&quot;#&quot; th:th:action=&quot;@{/users}&quot; th:th:object=&quot;${user}&quot; method=&quot;post&quot;&gt;&#10;            &lt;input type=&quot;hidden&quot; th:th:field=&quot;*{id}&quot; /&gt;&#10;&#10;            &lt;table&gt;&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;Username:&lt;/td&gt;&#10;                    &lt;td&gt;&lt;input type=&quot;text&quot; th:th:field=&quot;*{username}&quot; /&gt;&lt;/td&gt;&#10;                    &lt;td th:th:if=&quot;${#fields.hasErrors('username')}&quot; th:th:errors=&quot;*{username}&quot;&gt;Username Error&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;Email:&lt;/td&gt;&#10;                    &lt;td&gt;&lt;input type=&quot;text&quot; th:th:field=&quot;*{email}&quot; /&gt;&lt;/td&gt;&#10;                    &lt;td th:th:if=&quot;${#fields.hasErrors('email')}&quot; th:th:errors=&quot;*{email}&quot;&gt;Email Error&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;Role:&lt;/td&gt;&#10;                    &lt;td&gt;&#10;                        &lt;select th:th:field=&quot;*{role}&quot;&gt;&#10;                            &lt;option&#10;                                    th:th:each=&quot;roleOption : ${roles}&quot;&#10;                                    th:th:value=&quot;${roleOption.key}&quot;&#10;                                    th:th:text=&quot;${roleOption.value}&quot;&#10;                            &gt;&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                    &lt;/td&gt;&#10;                    &lt;td th:th:if=&quot;${#fields.hasErrors('role')}&quot; th:th:errors=&quot;*{role}&quot;&gt;Role Error&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;Password:&lt;/td&gt;&#10;                    &lt;td&gt;&lt;input type=&quot;text&quot; th:th:field=&quot;*{password}&quot; /&gt;&lt;/td&gt;&#10;                    &lt;td th:th:if=&quot;${#fields.hasErrors('password')}&quot; th:th:errors=&quot;*{password}&quot;&gt;Password Error&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                &lt;tr&gt;&#10;                    &lt;td&gt;&lt;button type=&quot;submit&quot;&gt;Save&lt;/button&gt;&lt;/td&gt;&#10;                    &lt;td&gt;&lt;a th:th:href=&quot;@{/users}&quot;&gt;Back&lt;/a&gt;&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/table&gt;&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="prj-todos-list" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&#10;      xmlns:th=&quot;http://www.thymeleaf.org&quot;&#10;      xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;User list&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;div&gt;&#10;    &lt;h2 th:th:text=&quot;${'Hello, ' + principal}&quot;&gt;&lt;/h2&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;panel panel-default&quot;&gt;&#10;&#10;    &lt;div class=&quot;panel-heading&quot;&gt;&#10;        &lt;h1&gt;List of Todos &lt;/h1&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div th:th:if=&quot;${success}&quot;&gt;&#10;        &lt;h2 th:th:text=&quot;${success}&quot;&gt;&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;well&quot;&gt;&#10;        &lt;a th:th:href=&quot;@{'/todos/new'}&quot;&gt;Add New Todo&lt;/a&gt;&#10;        &lt;a th:th:href=&quot;@{/}&quot;&gt;Back&lt;/a&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;table class=&quot;table table-hover&quot;&gt;&#10;        &lt;thead&gt;&#10;        &lt;tr&gt;&#10;            &lt;th&gt;Title&lt;/th&gt;&#10;            &lt;th&gt;Description&lt;/th&gt;&#10;            &lt;th&gt;Role&lt;/th&gt;&#10;            &lt;th&gt;&lt;/th&gt;&#10;            &lt;th&gt;&lt;/th&gt;&#10;        &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;        &lt;tr th:th:each=&quot;todo : ${todos}&quot;&gt;&#10;            &lt;td th:th:text=&quot;${todo.title}&quot;&gt;&lt;/td&gt;&#10;            &lt;td th:th:text=&quot;${todo.description}&quot;&gt;&lt;/td&gt;&#10;            &lt;td&gt;&#10;                &lt;a th:th:href=&quot;@{'/todos/' + ${todo.id}}&quot; class=&quot;btn btn-success custom-width&quot;&gt;edit&lt;/a&gt;&#10;            &lt;/td&gt;&#10;            &lt;td&gt;&#10;                &lt;a th:th:href=&quot;@{'/todos/delete/' + ${todo.id}}&quot; class=&quot;btn btn-danger custom-width&quot;&gt;complete&lt;/a&gt;&#10;            &lt;/td&gt;&#10;        &lt;/tr&gt;&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="prj-todo-edit" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Create Todo&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;div&gt;&#10;    &lt;h2 th:th:text=&quot;${'Hello, ' + principal}&quot;&gt;&lt;/h2&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;panel panel-default&quot;&gt;&#10;&#10;    &lt;div class=&quot;panel-heading&quot;&gt;&#10;        &lt;h1&gt;Create Todo&lt;/h1&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;form action=&quot;#&quot; th:th:action=&quot;@{/todos}&quot; th:th:object=&quot;${todo}&quot; method=&quot;post&quot;&gt;&#10;        &lt;input type=&quot;hidden&quot; th:th:field=&quot;*{id}&quot; /&gt;&#10;&#10;        &lt;table&gt;&#10;            &lt;tr&gt;&#10;                &lt;td&gt;Title:&lt;/td&gt;&#10;                &lt;td&gt;&lt;input type=&quot;text&quot; th:th:field=&quot;*{title}&quot; /&gt;&lt;/td&gt;&#10;                &lt;td th:th:if=&quot;${#fields.hasErrors('title')}&quot; th:th:errors=&quot;*{title}&quot;&gt;Title Error&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr&gt;&#10;                &lt;td&gt;Description:&lt;/td&gt;&#10;                &lt;td&gt;&lt;textarea th:th:field=&quot;*{description}&quot; /&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr&gt;&#10;                &lt;td&gt;&lt;button type=&quot;submit&quot;&gt;Save&lt;/button&gt;&lt;/td&gt;&#10;                &lt;td&gt;&lt;a th:th:href=&quot;@{/todos}&quot;&gt;Back&lt;/a&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/table&gt;&#10;    &lt;/form&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="prj-advice-controller-1" value="@org.springframework.web.bind.annotation.ControllerAdvice&#10;@org.springframework.web.bind.annotation.SessionAttributes(value&quot;principal&quot;)&#10;@org.springframework.web.bind.annotation.RequestMapping(value&quot;/&quot;)&#10;public class AdviceController {&#10;&#10;    @org.springframework.web.bind.annotation.ModelAttribute(value&quot;principal&quot;)&#10;    public java.lang.String getPrincipal(){&#10;        org.springframework.security.core.Authentication authentication = org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();&#10;&#10;        if (java.util.Objects.nonNull(authentication)) {&#10;            java.lang.Object principal = authentication.getPrincipal();&#10;&#10;            if (principal instanceof org.springframework.security.core.userdetails.UserDetails) {&#10;                return ((org.springframework.security.core.userdetails.UserDetails) principal).getUsername();&#10;            }&#10;&#10;            return principal.toString();&#10;        }&#10;&#10;        return &quot;&quot;;&#10;    }&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-web-security-2" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;@org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity(prePostEnabled = true)&#10;@lombok.RequiredArgsConstructor&#10;public class SecurityConfiguration extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;&#10;    private final com.spring.boot.demo.crm.security.CrmUserDetailsService crmUserDetailsService;&#10;&#10;    @java.lang.Override&#10;    protected void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        http&#10;                .csrf().disable()&#10;                .authorizeRequests()&#10;                .antMatchers(&quot;/api/**&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;                .and()&#10;                .formLogin()&#10;                .loginPage(&quot;/login&quot;)&#10;                .permitAll()&#10;                .and()&#10;                .logout()&#10;                .permitAll();&#10;    }&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public void configureGlobal(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder auth) throws java.lang.Exception {&#10;        auth.userDetailsService(crmUserDetailsService);&#10;        auth.authenticationProvider(authenticationProvider());&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider() {&#10;        org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider = new org.springframework.security.authentication.dao.DaoAuthenticationProvider();&#10;        authenticationProvider.setUserDetailsService(crmUserDetailsService);&#10;        authenticationProvider.setPasswordEncoder(passwordEncoder());&#10;        return authenticationProvider;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.crypto.password.PasswordEncoder passwordEncoder() {&#10;        return new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-web-security-3" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;@org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity(prePostEnabled = true)&#10;@lombok.RequiredArgsConstructor&#10;public class SecurityConfiguration extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;&#10;    private final com.spring.boot.demo.crm.security.CrmUserDetailsService crmUserDetailsService;&#10;&#10;    @java.lang.Override&#10;    protected void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        http&#10;                .csrf().disable()&#10;                .authorizeRequests()&#10;                .antMatchers(&quot;/api/**&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;                .and()&#10;                .formLogin()&#10;                .loginPage(&quot;/login&quot;)&#10;                .permitAll()&#10;                .and()&#10;                .logout()&#10;                .permitAll()&#10;                .and()&#10;                .exceptionHandling().accessDeniedPage(&quot;/403&quot;);&#10;    }&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public void configureGlobal(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder auth) throws java.lang.Exception {&#10;        auth.userDetailsService(crmUserDetailsService);&#10;        auth.authenticationProvider(authenticationProvider());&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider() {&#10;        org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider = new org.springframework.security.authentication.dao.DaoAuthenticationProvider();&#10;        authenticationProvider.setUserDetailsService(crmUserDetailsService);&#10;        authenticationProvider.setPasswordEncoder(passwordEncoder());&#10;        return authenticationProvider;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.crypto.password.PasswordEncoder passwordEncoder() {&#10;        return new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-advice-controller-2" value="@org.springframework.web.bind.annotation.ControllerAdvice&#10;@org.springframework.web.bind.annotation.SessionAttributes(value&quot;principal&quot;)&#10;@org.springframework.web.bind.annotation.RequestMapping(value&quot;/&quot;)&#10;public class AdviceController {&#10;&#10;    @org.springframework.web.bind.annotation.ModelAttribute(value&quot;principal&quot;)&#10;    public java.lang.String getPrincipal(){&#10;        org.springframework.security.core.Authentication authentication = org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();&#10;&#10;        if (java.util.Objects.nonNull(authentication)) {&#10;            java.lang.Object principal = authentication.getPrincipal();&#10;&#10;            if (principal instanceof org.springframework.security.core.userdetails.UserDetails) {&#10;                return ((org.springframework.security.core.userdetails.UserDetails) principal).getUsername();&#10;            }&#10;&#10;            return principal.toString();&#10;        }&#10;&#10;        return &quot;&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(value = &quot;/403&quot;)&#10;    public org.springframework.web.servlet.ModelAndView accessDenied(java.security.Principal user) {&#10;        org.springframework.web.servlet.ModelAndView model = new org.springframework.web.servlet.ModelAndView();&#10;&#10;        if (java.util.Objects.nonNull(user)) {&#10;            model.addObject(&quot;msg&quot;, &quot;Hi &quot; + user.getName()&#10;                    + &quot;, you do not have permission to access this page!&quot;);&#10;        } else {&#10;            model.addObject(&quot;msg&quot;,&#10;                    &quot;You do not have permission to access this page!&quot;);&#10;        }&#10;&#10;        model.setViewName(&quot;403&quot;);&#10;        return model;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-jpa-configuration" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.transaction.annotation.EnableTransactionManagement&#10;public class JpaConfiguration {&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private org.springframework.core.env.Environment environment;&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.orm.hibernate5.LocalSessionFactoryBean sessionFactory() {&#10;        org.springframework.orm.hibernate5.LocalSessionFactoryBean sessionFactory = new org.springframework.orm.hibernate5.LocalSessionFactoryBean();&#10;        sessionFactory.setDataSource(dataSource());&#10;        sessionFactory.setPackagesToScan(&quot;com.spring.boot.demo.crm.model&quot;);&#10;        sessionFactory.setHibernateProperties(hibernateProperties());&#10;        return sessionFactory;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public javax.sql.DataSource dataSource() {&#10;        org.springframework.jdbc.datasource.DriverManagerDataSource dataSource = new org.springframework.jdbc.datasource.DriverManagerDataSource();&#10;        dataSource.setDriverClassName(environment.getRequiredProperty(&quot;spring.datasource.driver&quot;));&#10;        dataSource.setUrl(environment.getRequiredProperty(&quot;spring.datasource.url&quot;));&#10;        dataSource.setUsername(environment.getRequiredProperty(&quot;spring.datasource.username&quot;));&#10;        dataSource.setPassword(environment.getRequiredProperty(&quot;spring.datasource.password&quot;));&#10;        return dataSource;&#10;    }&#10;&#10;    private java.util.Properties hibernateProperties() {&#10;        java.util.Properties properties = new java.util.Properties();&#10;        properties.put(&quot;hibernate.dialect&quot;, environment.getRequiredProperty(&quot;hibernate.dialect&quot;));&#10;        properties.put(&quot;hibernate.show_sql&quot;, environment.getRequiredProperty(&quot;hibernate.show_sql&quot;));&#10;        properties.put(&quot;hibernate.format_sql&quot;, environment.getRequiredProperty(&quot;hibernate.format_sql&quot;));&#10;        return properties;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public org.springframework.orm.hibernate5.HibernateTransactionManager transactionManager(org.hibernate.SessionFactory s) {&#10;        org.springframework.orm.hibernate5.HibernateTransactionManager txManager = new org.springframework.orm.hibernate5.HibernateTransactionManager();&#10;        txManager.setSessionFactory(s);&#10;        return txManager;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-config-2" value="management:&#10;  security:&#10;    enabled: false&#10;&#10;spring:&#10;  datasource:&#10;    url: jdbc:postgresql://localhost:5432/crm&#10;    username: postgres&#10;    password: postgres&#10;    driver: org.postgresql.Driver&#10;  data:&#10;    rest:&#10;      base-path: /api&#10;&#10;hibernate:&#10;  dialect: org.hibernate.dialect.PostgreSQLDialect&#10;  show_sql: true&#10;  format_sql: true" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="prj-auditor" value="public class AuditorAwareImpl implements org.springframework.data.domain.AuditorAware&lt;java.lang.Long&gt; {&#10;&#10;    @java.lang.Override&#10;    public java.lang.Long getCurrentAuditor() {&#10;        com.spring.boot.demo.crm.security.CrmUserDetails crmUserDetails = (com.spring.boot.demo.crm.security.CrmUserDetails) org.springframework.security.core.context.SecurityContextHolder.getContext()&#10;                .getAuthentication().getPrincipal();&#10;        return crmUserDetails.getId();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-jpa-configuration-2" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.transaction.annotation.EnableTransactionManagement&#10;@org.springframework.data.jpa.repository.config.EnableJpaAuditing(auditorAwareRef = &quot;auditorProvider&quot;)&#10;public class JpaConfiguration {&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private org.springframework.core.env.Environment environment;&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.orm.hibernate5.LocalSessionFactoryBean sessionFactory() {&#10;        org.springframework.orm.hibernate5.LocalSessionFactoryBean sessionFactory = new org.springframework.orm.hibernate5.LocalSessionFactoryBean();&#10;        sessionFactory.setDataSource(dataSource());&#10;        sessionFactory.setPackagesToScan(&quot;com.spring.boot.demo.crm.model&quot;);&#10;        sessionFactory.setHibernateProperties(hibernateProperties());&#10;        return sessionFactory;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public javax.sql.DataSource dataSource() {&#10;        org.springframework.jdbc.datasource.DriverManagerDataSource dataSource = new org.springframework.jdbc.datasource.DriverManagerDataSource();&#10;        dataSource.setDriverClassName(environment.getRequiredProperty(&quot;spring.datasource.driver&quot;));&#10;        dataSource.setUrl(environment.getRequiredProperty(&quot;spring.datasource.url&quot;));&#10;        dataSource.setUsername(environment.getRequiredProperty(&quot;spring.datasource.username&quot;));&#10;        dataSource.setPassword(environment.getRequiredProperty(&quot;spring.datasource.password&quot;));&#10;        return dataSource;&#10;    }&#10;&#10;    private java.util.Properties hibernateProperties() {&#10;        java.util.Properties properties = new java.util.Properties();&#10;        properties.put(&quot;hibernate.dialect&quot;, environment.getRequiredProperty(&quot;hibernate.dialect&quot;));&#10;        properties.put(&quot;hibernate.show_sql&quot;, environment.getRequiredProperty(&quot;hibernate.show_sql&quot;));&#10;        properties.put(&quot;hibernate.format_sql&quot;, environment.getRequiredProperty(&quot;hibernate.format_sql&quot;));&#10;        return properties;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public org.springframework.orm.hibernate5.HibernateTransactionManager transactionManager(org.hibernate.SessionFactory s) {&#10;        org.springframework.orm.hibernate5.HibernateTransactionManager txManager = new org.springframework.orm.hibernate5.HibernateTransactionManager();&#10;        txManager.setSessionFactory(s);&#10;        return txManager;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.data.domain.AuditorAware&lt;java.lang.Long&gt; auditorProvider() {&#10;        return new com.spring.boot.demo.crm.repository.AuditorAwareImpl();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-user-2" value="@javax.persistence.Entity&#10;@javax.persistence.Table(name = &quot;users&quot;)&#10;@lombok.Getter&#10;@lombok.Setter&#10;@lombok.NoArgsConstructor&#10;@lombok.ToString&#10;@javax.persistence.EntityListeners(org.springframework.data.jpa.domain.support.AuditingEntityListener.class)&#10;public class User {&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)&#10;    private java.lang.Long id;&#10;&#10;    @org.hibernate.validator.constraints.NotEmpty&#10;    private java.lang.String username;&#10;    @org.hibernate.validator.constraints.NotEmpty&#10;    private java.lang.String password;&#10;    @org.hibernate.validator.constraints.NotEmpty&#10;    @org.hibernate.validator.constraints.Email&#10;    private java.lang.String email;&#10;&#10;    @javax.validation.constraints.NotNull&#10;    @javax.persistence.Enumerated(javax.persistence.EnumType.STRING)&#10;    private com.spring.boot.demo.crm.model.UserRole role;&#10;&#10;    @javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, mappedBy = &quot;user&quot;)&#10;    private java.util.List&lt;com.spring.boot.demo.crm.model.Todo&gt; todos;&#10;&#10;    public User(java.lang.String username, java.lang.String password, java.lang.String email) {&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;    }&#10;&#10;    @org.springframework.data.annotation.CreatedDate&#10;    @org.hibernate.annotations.Type(type = &quot;java.time.Instant&quot;)&#10;    private java.time.Instant created;&#10;&#10;    @org.springframework.data.annotation.LastModifiedDate&#10;    @org.hibernate.annotations.Type(type = &quot;java.time.Instant&quot;)&#10;    private java.time.Instant updated;&#10;&#10;    @javax.persistence.Column(name = &quot;CREATED_BY_ID&quot;)&#10;    @org.springframework.data.annotation.CreatedBy&#10;    private java.lang.Long createdBy;&#10;&#10;    @javax.persistence.Column(name = &quot;UPDATED_BY_ID&quot;)&#10;    @org.springframework.data.annotation.LastModifiedBy&#10;    private java.lang.Long updatedBy;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-user-rest-projection" value="@org.springframework.data.rest.core.config.Projection(name = &quot;user&quot;, types = com.spring.boot.demo.crm.model.User.class)&#10;public interface UserRestProjection {&#10;&#10;    java.lang.String getUsername();&#10;    java.lang.String getEmail();&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-aop-config" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.context.annotation.EnableAspectJAutoProxy(proxyTargetClass = true)&#10;public class AopConfiguration {&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-aspect" value="@lombok.extern.slf4j.Slf4j&#10;@org.aspectj.lang.annotation.Aspect&#10;@org.springframework.stereotype.Component&#10;public class CrmAspect {&#10;&#10;    @org.aspectj.lang.annotation.Before(value&quot;userListRequested()&quot;)&#10;    public void beforeUserList(org.aspectj.lang.JoinPoint joinPoint) {&#10;        log.error(&quot;BEFORE User list method triggered&quot;);&#10;    }&#10;&#10;    @org.aspectj.lang.annotation.After(value&quot;userListRequested()&quot;)&#10;    public void afterUserList(org.aspectj.lang.JoinPoint joinPoint) {&#10;        log.error(&quot;AFTER User list method triggered&quot;);&#10;    }&#10;&#10;    @org.aspectj.lang.annotation.Around(value&quot;userListRequested()&quot;)&#10;    public java.lang.Object aroundUserList(org.aspectj.lang.ProceedingJoinPoint joinPoint) {&#10;        log.error(&quot;BEFORE AROUND User list method triggered&quot;);&#10;&#10;        try {&#10;            java.lang.Object proceed = joinPoint.proceed();&#10;            log.error(&quot;AFTER AROUND User list method triggered&quot;);&#10;            return proceed;&#10;        } catch (java.lang.Throwable throwable) {&#10;            throwable.printStackTrace();&#10;        }&#10;        return null;&#10;    }&#10;&#10;    @org.aspectj.lang.annotation.Pointcut(value&quot;execution(* com.spring.boot.demo.crm.controller.UserController.listUsers(..))&quot;)&#10;    public void userListRequested() {&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="prj-migration" value="databaseChangeLog:&#10;  - changeSet:&#10;      id: 1&#10;      author: i.katlinsky&#10;      changes:&#10;        - createTable:&#10;            tableName: users&#10;            columns:&#10;              - column:&#10;                  name: id&#10;                  type: int&#10;                  autoIncrement: true&#10;                  constraints:&#10;                    primaryKey: true&#10;                    nullable: false&#10;              - column:&#10;                  name: username&#10;                  type: varchar(50)&#10;                  constraints:&#10;                    nullable: false&#10;              - column:&#10;                  name: password&#10;                  type: varchar(100)&#10;                  constraints:&#10;                    nullable: false&#10;              - column:&#10;                  name: email&#10;                  type: char(50)&#10;              - column:&#10;                  name: role&#10;                  type: char(50)&#10;              - column:&#10;                  name: created_by&#10;                  type: int&#10;              - column:&#10;                  name: updated_by&#10;                  type: int&#10;              - column:&#10;                  name: created&#10;                  type: timestamp&#10;              - column:&#10;                  name: updated&#10;                  type: timestamp&#10;&#10;  - changeSet:&#10;      id: 2&#10;      author: i.katlinsky&#10;      changes:&#10;        - insert:&#10;            tableName: users&#10;            columns:&#10;              - column:&#10;                  name: username&#10;                  value: Jack&#10;              - column:&#10;                  name: password&#10;                  value: $2a$10$DHPScDzqGgIG57V.79jDT.9E6FuWm8I2T8vF0yBN0kuaomtVotaOW&#10;              - column:&#10;                  name: email&#10;                  value: jack@email.com&#10;              - column:&#10;                  name: role&#10;                  value: ROLE_ADMIN&#10;&#10;  - changeSet:&#10;      id: 3&#10;      author: i.katlinsky&#10;      changes:&#10;        - createTable:&#10;            tableName: todos&#10;            columns:&#10;              - column:&#10;                  name: id&#10;                  type: int&#10;                  autoIncrement: true&#10;                  constraints:&#10;                    primaryKey: true&#10;                    nullable: false&#10;              - column:&#10;                  name: title&#10;                  type: varchar(50)&#10;                  constraints:&#10;                    nullable: false&#10;              - column:&#10;                  name: description&#10;                  type: text&#10;              - column:&#10;                  name: user_id&#10;                  type: int&#10;                  constraints:&#10;                    nullable: false&#10;        - addForeignKeyConstraint:&#10;              baseColumnNames: user_id&#10;              baseTableName: todos&#10;              constraintName: fk_todos_user&#10;              referencedColumnNames: id&#10;              referencedTableName: users&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="2a" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="prj-403" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Access dened&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;h1&gt;Access Denied&lt;/h1&gt;&#10;&#10;&lt;h2 th:th:text=&quot;${msg}&quot;&gt;&lt;/h2&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="jwt-user" value="@javax.persistence.Entity&#10;@lombok.Getter&#10;@lombok.Setter&#10;@lombok.EqualsAndHashCode&#10;@lombok.ToString&#10;@lombok.NoArgsConstructor&#10;public class User {&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.AUTO)&#10;    private java.lang.Long id;&#10;&#10;    private java.lang.String username;&#10;&#10;    private java.lang.String password;&#10;&#10;    @javax.persistence.Column&#10;    @javax.persistence.Enumerated(javax.persistence.EnumType.STRING)&#10;    private com.spring.jwt.model.UserRole role;&#10;&#10;    public User(java.lang.String username, java.lang.String password, final com.spring.jwt.model.UserRole role) {&#10;        this.username = username;&#10;        this.password = password;&#10;        this.role = role;&#10;    }&#10;&#10;    public void applyChanges(final com.spring.jwt.model.User inUser) {&#10;        this.setUsername(inUser.getUsername());&#10;        this.setRole(inUser.getRole());&#10;        this.setPassword(inUser.getPassword());&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-user-role" value="/**&#10; * @author ikatlinsky&#10; * @since 5/12/17&#10; */&#10;public enum UserRole {&#10;    UserRole,&#10;    UserRole&#10;}&#10;" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-user-repo" value="@org.springframework.stereotype.Repository&#10;public interface UserRepository extends org.springframework.data.jpa.repository.JpaRepository&lt;com.spring.jwt.model.User, java.lang.Long&gt; {&#10;&#10;    com.spring.jwt.model.User findByUsername(java.lang.String username);&#10;}&#10;" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-user-details-service" value="@org.springframework.stereotype.Service&#10;@lombok.RequiredArgsConstructor&#10;public class JwtUserDetailsServiceImpl implements org.springframework.security.core.userdetails.UserDetailsService {&#10;&#10;    private final com.spring.jwt.repository.UserRepository userRepository;&#10;&#10;    @java.lang.Override&#10;    public org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String username) throws org.springframework.security.core.userdetails.UsernameNotFoundException {&#10;        com.spring.jwt.model.User byUsername = this.userRepository.findByUsername(username);&#10;&#10;        return java.util.Optional.ofNullable(byUsername)&#10;                .map(com.spring.jwt.security.model.JwtUserDetails::new)&#10;                .orElseThrow(() -&gt; new com.spring.jwt.service.dto.JsonException(&quot;User nor found.&quot;));&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-auth-filter" value="public class JwtAuthenticationFilter extends org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter {&#10;&#10;    public JwtAuthenticationFilter(final org.springframework.security.authentication.AuthenticationManager authenticationManager) {&#10;        super(request -&gt; true);&#10;        setAuthenticationManager(authenticationManager);&#10;        setAuthenticationFailureHandler(new com.spring.jwt.security.handler.RestAuthenticationFailureHandler());&#10;    }&#10;&#10;    @java.lang.Override&#10;    public org.springframework.security.core.Authentication attemptAuthentication(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)&#10;        throws java.io.IOException, javax.servlet.ServletException {&#10;        try {&#10;            // Getting JWT token from request&#10;            java.lang.String token = java.util.Optional.ofNullable(request.getHeader(com.spring.jwt.security.service.AuthenticationHelper.AUTHENTICATION_HEADER))&#10;                    .map(header -&gt; header.substring(7)).orElse(null);&#10;&#10;            if (java.util.Objects.isNull(token)) {&#10;                throw new org.springframework.security.authentication.BadCredentialsException(&quot;Token not found in request's header.&quot;);&#10;            }&#10;&#10;            // Create token for authentication provider&#10;            com.spring.jwt.security.model.JwtAuthenticationToken authRequest = new com.spring.jwt.security.model.JwtAuthenticationToken(token);&#10;&#10;            // Return a fully authenticated object&#10;            return this.getAuthenticationManager().authenticate(authRequest);&#10;        } catch (org.springframework.security.core.AuthenticationException exception) {&#10;            // Go to 401 error page if exception thrown&#10;            unsuccessfulAuthentication(request, response, exception);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    @java.lang.Override&#10;    protected void successfulAuthentication(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response,&#10;                                            final javax.servlet.FilterChain chain, final org.springframework.security.core.Authentication authResult)&#10;        throws java.io.IOException, javax.servlet.ServletException {&#10;        // Set authentication to context&#10;        org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(authResult);&#10;&#10;        // Fire event&#10;        if (this.eventPublisher != null) {&#10;            this.eventPublisher.publishEvent(new org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent(authResult, this.getClass()));&#10;        }&#10;&#10;        chain.doFilter(request, response);&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-auth-provider" value="@org.springframework.stereotype.Component&#10;@lombok.RequiredArgsConstructor&#10;public class JwtAuthenticationProvider implements org.springframework.security.authentication.AuthenticationProvider {&#10;&#10;    private static final long MILLIS_IN_SECOND = 1000L;&#10;&#10;    private final com.spring.jwt.repository.UserRepository userRepository;&#10;    private final com.spring.jwt.security.service.AuthenticationHelper authenticationHelper;&#10;&#10;    @java.lang.Override&#10;    public org.springframework.security.core.Authentication authenticate(final org.springframework.security.core.Authentication authRequest) {&#10;        // Getting string token from authentication request object&#10;        java.lang.String token = org.apache.commons.lang3.StringUtils.trimToNull((java.lang.String) authRequest.getCredentials());&#10;&#10;        //  Deserialize token&#10;        com.spring.jwt.security.model.TokenPayload tokenPayload = authenticationHelper.decodeToken(token);&#10;&#10;        // Checking if token already expired and throwing an AuthenticationException in this case&#10;        checkIsExpired(tokenPayload.getExp());&#10;&#10;        // Getting user id from token&#10;        java.lang.Long userEntityId = tokenPayload.getUserId();&#10;        if (java.util.Objects.isNull(userEntityId)) {&#10;            throw new com.spring.jwt.security.exception.InvalidTokenAuthenticationException(&quot;Token does not contain a user id.&quot;);&#10;        }&#10;&#10;        // Getting user from database&#10;        com.spring.jwt.model.User user = userRepository.findOne(userEntityId);&#10;        if (java.util.Objects.isNull(user)) {&#10;            throw new com.spring.jwt.security.exception.InvalidTokenAuthenticationException(&quot;Token does not contain existed user id.&quot;);&#10;        }&#10;&#10;        // Return authenticated Authentication&#10;        com.spring.jwt.security.model.JwtUserDetails userDetails = new com.spring.jwt.security.model.JwtUserDetails(user);&#10;        return new com.spring.jwt.security.model.JwtAuthenticationToken(userDetails);&#10;    }&#10;&#10;    private void checkIsExpired(final java.lang.Long tokenExpirationTime) {&#10;        if ((java.lang.System.currentTimeMillis() / MILLIS_IN_SECOND) &gt; tokenExpirationTime) {&#10;            throw new com.spring.jwt.security.exception.ExpiredTokenAuthenticationException();&#10;        }&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean supports(final java.lang.Class&lt;?&gt; authentication) {&#10;        return com.spring.jwt.security.model.JwtAuthenticationToken.class.isAssignableFrom(authentication);&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-sec-config" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;@org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity(prePostEnabled = true)&#10;@lombok.RequiredArgsConstructor&#10;public class SecurityConfiguration extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;&#10;    private static final java.lang.String[] allowedUrlsForPost = new java.lang.String[]{ &quot;/auth/login&quot; };&#10;&#10;    private final com.spring.jwt.security.service.JwtAuthenticationProvider jwtAuthenticationProvider;&#10;    private final org.springframework.security.core.userdetails.UserDetailsService userDetailsService;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public void configureAuthentication(final org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder)&#10;            throws java.lang.Exception {&#10;        authenticationManagerBuilder&#10;                .userDetailsService(this.userDetailsService)&#10;                .passwordEncoder(passwordEncoder());&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.crypto.password.PasswordEncoder passwordEncoder() {&#10;        return new org.springframework.security.crypto.password.StandardPasswordEncoder();&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    @java.lang.Override&#10;    public org.springframework.security.authentication.AuthenticationManager authenticationManagerBean() throws java.lang.Exception {&#10;        return super.authenticationManagerBean();&#10;    }&#10;&#10;    @java.lang.Override&#10;    protected void configure(final org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        http.sessionManagement()&#10;                .sessionCreationPolicy(org.springframework.security.config.http.SessionCreationPolicy.STATELESS)&#10;                .and()&#10;                .authorizeRequests()&#10;                .antMatchers(&quot;/**&quot;)&#10;                .permitAll()&#10;                .and()&#10;                .csrf().disable()&#10;                .addFilterAfter(new com.spring.jwt.security.service.JwtAuthenticationFilter(authenticationManagerBean()),&#10;                        org.springframework.security.web.authentication.www.BasicAuthenticationFilter.class)&#10;                .exceptionHandling()&#10;                .authenticationEntryPoint(new com.spring.jwt.security.handler.RestAuthenticationEntryPoint())&#10;                .accessDeniedHandler(new com.spring.jwt.security.handler.RestAccessDeniedHandler());&#10;    }&#10;&#10;    @java.lang.Override&#10;    public void configure(final org.springframework.security.config.annotation.web.builders.WebSecurity web) throws java.lang.Exception {&#10;        web.ignoring()&#10;                .antMatchers(org.springframework.http.HttpMethod.POST, allowedUrlsForPost)&#10;                .antMatchers(org.springframework.http.HttpMethod.OPTIONS, &quot;/**&quot;);&#10;    }&#10;&#10;    @java.lang.Override&#10;    protected void configure(final org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder) throws java.lang.Exception {&#10;        authenticationManagerBuilder&#10;                .authenticationProvider(this.jwtAuthenticationProvider)&#10;                .userDetailsService(this.userDetailsService)&#10;                .passwordEncoder(this.passwordEncoder());&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-auth-service" value="@org.springframework.stereotype.Service&#10;@org.springframework.transaction.annotation.Transactional&#10;@lombok.RequiredArgsConstructor&#10;public class AuthenticationService {&#10;&#10;    private final com.spring.jwt.repository.UserRepository userRepository;&#10;    private final com.spring.jwt.service.transformer.AuthUserTransformer authUserTransformer;&#10;    private final com.spring.jwt.security.service.AuthenticationHelper authenticationHelper;&#10;    private final org.springframework.security.authentication.AuthenticationManager authenticationManager;&#10;&#10;    public com.spring.jwt.service.dto.LoginResponseDto login(final com.spring.jwt.service.dto.LoginRequestDto loginRequestDto) {&#10;        try {&#10;            java.lang.String username = java.util.Optional.ofNullable(loginRequestDto.getUsername())&#10;                    .orElseThrow(() -&gt; new org.springframework.security.authentication.BadCredentialsException(&quot;Username should be passed.&quot;));&#10;&#10;            java.lang.String password = java.util.Optional.ofNullable(loginRequestDto.getPassword())&#10;                    .orElseThrow(() -&gt; new org.springframework.security.authentication.BadCredentialsException(&quot;Password should be passed.&quot;));&#10;&#10;            org.springframework.security.authentication.UsernamePasswordAuthenticationToken authRequest = new org.springframework.security.authentication.UsernamePasswordAuthenticationToken(username,&#10;                    password);&#10;&#10;            // Try to authenticate with this token&#10;            final org.springframework.security.core.Authentication authResult = this.authenticationManager.authenticate(authRequest);&#10;&#10;            // Set generated JWT token to response header&#10;            if (authResult.isAuthenticated()) {&#10;                com.spring.jwt.security.model.JwtUserDetails userDetails = (com.spring.jwt.security.model.JwtUserDetails) authResult.getPrincipal();&#10;&#10;                com.spring.jwt.model.User user = userRepository.findOne(userDetails.getId());&#10;                if (java.util.Objects.isNull(user)) {&#10;                    throw new com.spring.jwt.service.dto.JsonException(&quot;User not exist in system.&quot;);&#10;                }&#10;&#10;                java.lang.String token = this.authenticationHelper.generateToken(userDetails.getId());&#10;&#10;                return new com.spring.jwt.service.dto.LoginResponseDto(token);&#10;            } else {&#10;                throw new com.spring.jwt.service.dto.JsonException(&quot;Authentication failed.&quot;);&#10;            }&#10;&#10;        } catch (org.springframework.security.authentication.BadCredentialsException exception) {&#10;            throw new com.spring.jwt.service.dto.JsonException(&quot;Username or password was incorrect. Please try again.&quot;, exception);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get user info.&#10;     * @return user info.&#10;     */&#10;    @org.springframework.transaction.annotation.Transactional(readOnly = true)&#10;    public com.spring.jwt.service.dto.AuthUserDto getMe() {&#10;        org.springframework.security.core.Authentication authentication = com.spring.jwt.security.SecurityHelper.getAuthenticationWithCheck();&#10;        com.spring.jwt.model.User byUsername = userRepository.findByUsername(authentication.getName());&#10;&#10;        return authUserTransformer.makeDto(byUsername);&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-auth-controller" value="@org.springframework.web.bind.annotation.RestController&#10;@org.springframework.web.bind.annotation.RequestMapping(value = &quot;/auth&quot;, produces = org.springframework.http.MediaType.APPLICATION_JSON_VALUE)&#10;@lombok.RequiredArgsConstructor&#10;public class AuthenticationController {&#10;&#10;    private final com.spring.jwt.service.AuthenticationService authenticationService;&#10;&#10;    @org.springframework.web.bind.annotation.PostMapping(value = &quot;/login&quot;)&#10;    @org.springframework.web.bind.annotation.ResponseStatus(value = org.springframework.http.HttpStatus.OK)&#10;    public com.spring.jwt.service.dto.LoginResponseDto login(&#10;            @org.springframework.web.bind.annotation.RequestBody final com.spring.jwt.service.dto.LoginRequestDto loginRequestDto&#10;    ) {&#10;        return authenticationService.login(loginRequestDto);&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(value = &quot;/me&quot;)&#10;    @org.springframework.web.bind.annotation.ResponseStatus(value = org.springframework.http.HttpStatus.OK)&#10;    public com.spring.jwt.service.dto.AuthUserDto me() {&#10;        return authenticationService.getMe();&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-bootstrap" value="@org.springframework.context.annotation.Bean&#10;    org.springframework.boot.CommandLineRunner bootstrap(final com.spring.jwt.repository.UserRepository userRepository, final org.springframework.security.crypto.password.PasswordEncoder passwordEncoder) {&#10;        return (args) -&gt; {&#10;            userRepository.save(&#10;                    new com.spring.jwt.model.User(&quot;Peter&quot;, passwordEncoder.encode(&quot;password&quot;), com.spring.jwt.model.UserRole.ROLE_ADMIN)&#10;            );&#10;&#10;            userRepository.save(&#10;                    new com.spring.jwt.model.User(&quot;John&quot;, passwordEncoder.encode(&quot;password&quot;), com.spring.jwt.model.UserRole.ROLE_USER)&#10;            );&#10;&#10;            userRepository.findAll().stream().map(com.spring.jwt.model.User::toString).forEach(java.lang.System.out::println);&#10;        };&#10;    }" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-user-service" value="@org.springframework.stereotype.Service&#10;@org.springframework.transaction.annotation.Transactional&#10;@lombok.RequiredArgsConstructor&#10;public class UserService {&#10;&#10;    private final com.spring.jwt.repository.UserRepository userRepository;&#10;    private final com.spring.jwt.service.transformer.UserListTransformer userListTransformer;&#10;&#10;    @org.springframework.transaction.annotation.Transactional(readOnly = true)&#10;    public java.util.List&lt;com.spring.jwt.service.dto.UserListDto&gt; findAll() {&#10;        java.util.List&lt;com.spring.jwt.model.User&gt; users = userRepository.findAll();&#10;&#10;        java.util.List&lt;com.spring.jwt.service.dto.UserListDto&gt; userDtoList = new java.util.ArrayList&lt;&gt;();&#10;        for (com.spring.jwt.model.User user : users) {&#10;            com.spring.jwt.service.dto.UserListDto dto = this.userListTransformer.makeDto(user);&#10;            userDtoList.add(dto);&#10;        }&#10;&#10;        return userDtoList;&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="jwt-user-controller" value="@org.springframework.web.bind.annotation.RestController&#10;@lombok.RequiredArgsConstructor&#10;@org.springframework.web.bind.annotation.RequestMapping(value = &quot;/users&quot;, produces = org.springframework.http.MediaType.APPLICATION_JSON_VALUE)&#10;public class UserController {&#10;&#10;    private final com.spring.jwt.service.UserService userService;&#10;&#10;    @org.springframework.security.access.prepost.PreAuthorize(value&quot;hasRole('ROLE_ADMIN')&quot;)&#10;    @org.springframework.web.bind.annotation.GetMapping&#10;    @org.springframework.web.bind.annotation.ResponseStatus(value = org.springframework.http.HttpStatus.OK)&#10;    public java.util.List&lt;com.spring.jwt.service.dto.UserListDto&gt; finalAll(&#10;    ) {&#10;        return this.userService.findAll();&#10;    }&#10;&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>